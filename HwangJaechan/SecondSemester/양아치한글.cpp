#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
#define 벡터 vector
#define 시간단축 ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define 스탠다드생략 using namespace std
#define 정수 int 
#define 두개 pair
#define 부울 bool
#define 입력 cin
#define 출력 cout
#define 없음 void 
#define 반복 for
#define 크기변경 resize
#define 만약 if
#define 그렇지않다면 else 
#define 그렇지않고 else if
#define 반환 return
#define 넣기 push_back
#define 크기 size
#define 앞 first
#define 뒤 second
#define 더큰거 max
#define 넘기기 continue
#define 메인 main

스탠다드생략;
//초기값 인풋
벡터<정수>사탕;
벡터<두개<정수,정수>>친구;
벡터<정수>친구들;
벡터<정수>최대사탕수;

정수 아이수, 친구관계수, 공명수;

정수 집합찾기(정수 나) {
	만약(나 == 친구[나].앞) {
		반환 나;
	}
	그렇지않다면{
		친구[나].앞 = 집합찾기(친구[나].앞);
		반환 친구[나].앞;
	}
}

없음 합집합(정수 하나, 정수 둘) {
	정수 친구집합_하나 = 집합찾기(하나);
	정수 친구집합_둘 = 집합찾기(둘);
	만약(친구집합_하나 == 친구집합_둘) {
		반환;
	}
	그렇지않다면{
		사탕[친구집합_하나] += 사탕[친구집합_둘];
		친구[친구집합_하나].뒤 += 친구[친구집합_둘].뒤;
		친구[친구집합_둘].앞 = 친구[친구집합_하나].앞;
	}
}

없음 초기값설정() {
	입력 >> 아이수 >> 친구관계수 >> 공명수;
	사탕.크기변경(아이수 + 1);
	친구.크기변경(아이수 + 1);
	최대사탕수.크기변경(아이수 + 1);
	반복(정수 인덱스 = 1; 인덱스 <= 아이수; 인덱스++) {
		입력 >> 사탕[인덱스];
		친구[인덱스].앞 = 인덱스;
		친구[인덱스].뒤 = 1;
	}
	반복(정수 인덱스 = 1; 인덱스 <= 친구관계수; 인덱스++) {
		정수 하나, 둘;
		입력 >> 하나 >> 둘;
		합집합(하나, 둘);
	}
	반복(정수 나 = 1; 나 <= 아이수; 나++) {
		만약(친구[나].앞 == 나) {
			친구들.넣기(나);
		}
	}
}

없음 해결() {
	반복(정수 인덱스 = 0; 인덱스 < 친구들.크기(); 인덱스++) {
		정수 대장 = 친구들[인덱스];
		반복(정수 울린친구수 = 공명수; 울린친구수 >= 친구[대장].뒤; 울린친구수--) {
			최대사탕수[울린친구수] = 더큰거(최대사탕수[울린친구수], 최대사탕수[울린친구수 - 친구[대장].뒤] + 사탕[대장]);
		}
	}
}

정수 메인() {
	시간단축;

	초기값설정();
	해결();
	출력 << 최대사탕수[공명수-1];

	반환 0;
}
